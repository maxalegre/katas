cmdhistory=["(alength [1 2 3 4 5])" "(doc alength)" "(count [1 2 3 4 5])" "(for i (range 5) println i)" "(for [i (range 5) println i])" "(for [i (range 5)] println i)" "(for [i (range 5)] (println i))" "(let (filter odd? [1 2 3]) [1 2 3])" "(let [(filter odd? [1 2 3])] [1 2 3])" "(let [[1 2 3] odd?] [1 2 3])" "(for [x [1 2 3] \:when (odd? x)] x)" "(\:r {\:r 2})" "(if (nil? [\:r {\:r true}]) true nil)" "(if (nil? [\:r {\:r nil}]) true nil)" "(if (nil? [\:r {\:r nil}]) \\"true\\" \\"nil\\")" "(nil? [\:r {\:r nil}])" "(nil? [\:r {\:r \\"xvznil\\"}])" "(nil? nil)" "[\:r {\:r nil}]" "(\:r {\:r nil})" "(if (nil? (\:r {\:r nil})) true nil)" "(require 'code-katas-1.core-test)" "(in-ns 'code-katas-1.core-test)" "(run-tests)" "(in-ns 'code-katas-1.core)" "(require 'code-katas-1.core-test)" "(run-tests)" "(in-ns 'code-katas-1.core-test)" "(in-ns 'code-katas-1.core)" "(require 'code-katas-1.core)" "(take-while (not\= 3 5) 1)" "(take-while neg? [3 -2 -1 0 1 2 3])" "(take-while (not\= start end) 1)" "(take-while (not\= 1 5) 1)" "(take-while (not\= 1 3) [1 7 3 4 5 6])" "(take-while neg? [3 -2 -1 0 1 2 3])" "(take-while neg? [-3 -2 1 -6 1 2 3])" "(for [[x y] '(2 5) \:while (not\= start end)] start)" "(for [[x y] '(2 5) \:while (not\= x y)] x)" "(for [(x y) [2 5] \:while (not\= x y)] x)" "(for [[x y] '([2 5]) \:while (not\= x y)] x)" "(range 3 7)" "(reduce cons [1 2 3] [4 5 6])" "(reduce conj [1 2 3] [4 5 6])" "(run-tests)" "(if (nil? (\:a {\:a nil \:b 2})) true nil)" "(if (nil? (\:a {\:a nil \:b 2})) \\"xzcxzc\\" nil)" "(\:x {\:a nil \:b 2})" "(if (contains? \:a {\:a nil \:b 2}) (if (nil? (\:a {\:a nil \:b 2})) true nil) nil)" "(if (contains? {\:a nil \:b 2} \:a) (if (nil? (\:a {\:a nil \:b 2})) true nil) nil)" "(if (contains? {\:a nil \:b 2} \:k) (if (nil? (\:a {\:a nil \:b 2})) true nil) \\"eueueu\\")" "(if (contains? {\:a nil \:b 2} \:k) (if (nil? (\:a {\:a nil \:b 2})) \\"erere\\" nil) \\"eueueu\\")" "(if (contains? {\:a nil \:b 2} \:a) (if (nil? (\:a {\:a nil \:b 2})) true nil) \\"eueueu\\")" "(if (contains? {\:a nil \:b 2} \:a) (if (nil? (\:a {\:a nil \:b 2})) \\"erere\\" nil) \\"eueueu\\")" "(loop [x 10]\\r\\n  (when (> x 1)\\r\\n    (println x)\\r\\n    (recur (- x 2))))" "(loop [x 10] (println x))" "(loop [x 10] println x)" "(loop [x 10] x)" "(loop [x 70] x)" "(loop [i 0]  \\r\\n  (when (< i 5)    \\r\\n    (println i)    \\r\\n    (recur (inc i)); loop i will take this value\\r\\n))" "(loop [i 0]   \\r\\n    (println i)    \\r\\n    (recur (inc i)); loop i will take this value\\r\\n)" "(\= 2 2)" "(loop [i 0]  \\r\\n  (when (< i 5)    \\r\\n    (println i)    \\r\\n    (recur (inc i)); loop i will take this value\\r\\n))" "(loop [i 5]  \\r\\n  (when (< i 10)    \\r\\n    (println i)    \\r\\n    (recur (inc i)); loop i will take this value\\r\\n))" "(loop [i 5]  \\r\\n     (when (< i 10)    \\r\\n       (conj i [])    \\r\\n       (recur (inc i)); loop i will take this value\\r\\n   ))" "(loop [i 5]  \\r\\n     (when (< i 10)    \\r\\n       i    \\r\\n       (recur (inc i)); loop i will take this value\\r\\n   ))" "(loop [i 5]  \\r\\n     (when (< i 10)    \\r\\n       (println i) \\n       (list* i)\\r\\n       (recur (inc i)); loop i will take this value\\r\\n   ))" "(dotimes [i 4] (prn i))" "(loop [i 5] (when (< i 10) (conj i []) (recur (inc i)) ))" "(loop [i 5] (when (< i 10) (println i) (recur (inc i)) ))" "(repeatedly \#(rand-int 100))" "(def integers (iterate inc 5))" "(iterate inc 5)" "(take 5 integers)" "(take (- end start) (iterate inc 5))" "(take (- 10 5) (iterate inc 5))" "(if (< 5 11) (take (- 11 5) (iterate inc 5)) \\"Inicio debe ser mas peque\u00F1o que final\\")" "(if (< 10 5) (take (- 5 10) (iterate inc 10)) \\"Inicio debe ser mas peque\u00F1o que final\\")"]
eclipse.preferences.version=1
